{
    "$schema": "https://registry.buz.dev/s/io.silverton/buz/internal/meta/v1.0.json",
    "$id": "https://registry.buz.dev/s/io.silverton/buz/internal/meta/v1.0.json",
    "title": "io.silverton/buz/internal/config/app/v1.0.json",
    "description": "Application configuration",
    "owner": {
        "org": "silverton",
        "team": "buz",
        "individual": "jakthom"
    },
    "self": {
        "vendor": "io.silverton",
        "namespace": "buz.internal.config.app",
        "version": "1.0"
    },
    "type": "object",
    "properties": {
        "version": {
            "type": "number",
            "description": "The config version"
        },
        "app": {
            "type": "object",
            "description": "Application configuration",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "some-collector",
                    "description": "The name of the buz collector"
                },
                "env": {
                    "type": "string",
                    "default": "dev",
                    "description": "Collector environment",
                    "enum": [
                        "development",
                        "staging",
                        "production"
                    ]
                },
                "port": {
                    "type": "integer",
                    "default": "8081",
                    "description": "Collector port"
                },
                "trackerDomain": {
                    "type": "string",
                    "default": "test.silverton.io",
                    "description": "The collector domain"
                },
                "enableConfigRoute" : {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to enable the config route"
                },
                "serverless" : {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to run buz in serverless mode"
                }
            },
            "additionalProperties": false,
            "required": [
                "name",
                "env",
                "port",
                "trackerDomain",
                "enableConfigRoute"
            ]
        },
        "middleware": {
            "type": "object",
            "description": "Middleware configuration",
            "properties": {
                "timeout": {
                    "type": "object",
                    "description": "Request timeout configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to time out all requests after a specified period of time"
                        },
                        "ms": {
                            "type": "integer",
                            "default": "2000",
                            "description": "Time out request and return a 4xx status code if this number of milliseconds is exceeded"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "ms"
                    ]
                },
                "rateLimiter": {
                    "type": "object",
                    "description": "Rate limiter configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to enable the rate limiter"
                        },
                        "period": {
                            "type": "string",
                            "default": "S",
                            "description": "The period by which to limit requests",
                            "enum": [
                                "MS",
                                "S",
                                "M",
                                "H",
                                "D"
                            ]
                        },
                        "limit": {
                            "type": "integer",
                            "default": "10",
                            "description": "The number of requests allowed within the specified period"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "period",
                        "limit"
                    ]
                },
                "identity": {
                    "type": "object",
                    "description": "Identity middleware config",
                    "properties": {
                        "cookie": {
                            "type": "object",
                            "description": "Server-set cookie configuration",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "default": "true",
                                    "description": "Whether or not to activate the server-side id cookie"
                                },
                                "name": {
                                    "type": "string",
                                    "default": "nuid",
                                    "description": "The name of the id cookie"
                                },
                                "secure": {
                                    "type": "boolean",
                                    "default": "true",
                                    "description": "Secure cookie?"
                                },
                                "ttlDays": {
                                    "type": "integer",
                                    "default": "365",
                                    "description": "The number of days to persist the id cookie"
                                },
                                "domain": {
                                    "type": "string",
                                    "default": "silverton.io",
                                    "description": "The id cookie domain"
                                },
                                "path": {
                                    "type": "string",
                                    "default": "/",
                                    "description": "The id cookie path"
                                },
                                "sameSite": {
                                    "type": "string",
                                    "default": "Lax",
                                    "description": "The sameSite attribute of the id cookie",
                                    "enum": [
                                        "Lax",
                                        "Strict",
                                        "None"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "enabled",
                                "name",
                                "secure",
                                "ttlDays",
                                "domain",
                                "path",
                                "sameSite"
                            ]
                        },
                        "fallback": {
                            "type": "string",
                            "default": "00000000-0000-4000-A000-000000000000",
                            "description": "The identity fallback"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["cookie", "fallback"]
                },
                "cors": {
                    "type": "object",
                    "description": "CORS configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate the CORS middleware"
                        },
                        "allowOrigin": {
                            "type": "array",
                            "default": [
                                "*"
                            ],
                            "description": "A list of origins to allow CORS",
                            "items": {
                                "type": "string"
                            }
                        },
                        "allowCredentials": {
                            "type": "boolean",
                            "default": "true",
                            "description": "CORS allow credentials"
                        },
                        "allowMethods": {
                            "type": "array",
                            "default": [
                                "GET",
                                "POST",
                                "OPTIONS"
                            ],
                            "description": "HTTP methods to allow CORS",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OPTIONS",
                                    "GET",
                                    "POST"
                                ]
                            }
                        },
                        "maxAge": {
                            "type": "integer",
                            "default": "86400",
                            "description": "Preflight request cache duration"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "allowOrigin",
                        "allowCredentials",
                        "allowMethods",
                        "maxAge"
                    ]
                },
                "requestLogger": {
                    "type": "object",
                    "description": "Request logger configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate the json request logging middleware"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled"
                    ]
                },
                "yeet": {
                    "type": "object",
                    "description": "Yeet configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to activate the yeet middleware"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled"
                    ]
                }
            },
            "required": [
                "timeout",
                "rateLimiter",
                "identity",
                "cors",
                "requestLogger",
                "yeet"
            ]
        },
        "inputs": {
            "type": "object",
            "description": "Input configuration",
            "properties": {
                "snowplow": {
                    "type": "object",
                    "description": "Snowplow collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate snowplow tracking"
                        },
                        "standardRoutesEnabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to not to activate the standard snowplow routes"
                        },
                        "openRedirectsEnabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate redirect-based tracking"
                        },
                        "getPath": {
                            "type": "string",
                            "default": "/plw/g",
                            "description": "The path by which to process get-based events"
                        },
                        "postPath": {
                            "type": "string",
                            "default": "/plw/p",
                            "description": "The path by which to process post-based events"
                        },
                        "redirectPath": {
                            "type": "string",
                            "default": "/plw/r",
                            "description": "The path by which to process redirect-based events"
                    }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "standardRoutesEnabled",
                        "openRedirectsEnabled",
                        "getPath",
                        "postPath",
                        "redirectPath"
                    ]
                },
                "cloudevents": {
                    "type": "object",
                    "description": "CloudEvents collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate cloudevents tracking"
                        },
                        "path": {
                            "type": "string",
                            "default": "/cloudevent",
                            "description": "The path by which to process incoming cloudevents payloads"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "path"
                    ]
                },
                "selfDescribing": {
                    "type": "object",
                    "description": "Arbitrary self-describing events collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate arbitrary self-describing event tracking"
                        },
                        "path": {
                            "type": "string",
                            "default": "/gen/bp",
                            "description": "The path by which to process incoming self describing payloads"
                        },
                        "contexts": {
                            "type": "object",
                            "description": "Self describing events context config",
                            "properties": {
                                "rootKey": {
                                    "type": "string",
                                    "default": "contexts",
                                    "description": "The root json key that defines event contexts"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "rootKey"
                            ]
                        },
                        "payload": {
                            "type": "object",
                            "description": "Self describing events payload data config",
                            "properties": {
                                "rootKey": {
                                    "type": "string",
                                    "default": "data",
                                    "description": "The root json key that defines payload data. (root.PAYLOADKEY)"
                                },
                                "schemaKey": {
                                    "type": "string",
                                    "default": "schema",
                                    "description": "The key that defines the payload schema. (root.PAYLOADKEY.SCHEMAKEY)"
                                },
                                "dataKey": {
                                    "type": "string",
                                    "default": "data",
                                    "description": "The key that defines the payload data. (root.PAYLOADKEY.DATAKEY)"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "rootKey",
                                "schemaKey",
                                "dataKey"
                            ]
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "path",
                        "contexts",
                        "payload"
                    ]
                },
                "webhook": {
                    "type": "object",
                    "description": "Arbitrary webhook configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to enable arbitrary webhooks",
                            "default": "true"
                        },
                        "path": {
                            "type": "string",
                            "description": "The arbitrary webhook route",
                            "default": "/hook"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "path"
                    ]
                },
                "pixel": {
                    "type": "object",
                    "description": "Pixel configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to enable 1x1 pixels",
                            "default": "true"
                        },
                        "path": {
                            "type": "string",
                            "default": "/pxl",
                            "description": "The pixel path"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                }
            },
            "additionalProperties": false,
            "required": [
                "snowplow",
                "cloudevents",
                "selfDescribing",
                "webhook",
                "pixel"
            ]
        },
        "registry": {
            "type": "object",
            "description": "Schema registry configuration",
            "properties": {
                "backend": {
                    "type": "object",
                    "description": "Registry backend configuration",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "s3",
                            "description": "The type of schema registry backend",
                            "enum": [
                                "gcs",
                                "s3",
                                "minio",
                                "file",
                                "http",
                                "https",
                                "postgres",
                                "mysql",
                                "materialize",
                                "clickhouse",
                                "mongodb"
                            ]
                        },
                        "path": {
                            "type": "string",
                            "default": "/",
                            "description": "The root path of the schema registry backend"
                        },
                        "bucket": {
                            "type": "string",
                            "default": "buz-schemas",
                            "description": "The schema registry bucket, if applicable"
                        },
                        "host": {
                            "type": "string",
                            "description": "The schema registry host, if applicable"
                        },
                        "registryTable": {
                            "type": "string",
                            "description": "The database table that stores schemas",
                            "default": "registry"
                        },
                        "registryCollection": {
                            "type": "string",
                            "description": "The mongodb collection for schemas in the registry backend is mongodb",
                            "default": "registry"
                        },
                        "dbHosts": {
                            "type": "array",
                            "description": "The database host(s)",
                            "default": [
                                "localhost"
                            ]
                        },
                        "dbPort": {
                            "type": "number",
                            "description": "The database port",
                            "default": 5432
                        },
                        "dbName": {
                            "type": "string",
                            "description": "The database name",
                            "default": "buz"
                        },
                        "dbUser": {
                            "type": "string",
                            "description": "The database user",
                            "default": "buz"
                        },
                        "dbPass": {
                            "type": "string",
                            "description": "The database password",
                            "default": "buz"
                        },
                        "minioEndpoint": {
                            "type": "string",
                            "description": "The minio endpoint",
                            "default": "localhost:9000"
                        },
                        "accessKeyId": {
                            "type": "string",
                            "description": "The access key id, used for minio and s3",
                            "default": "minioadmin"
                        },
                        "secretAccessKey": {
                            "type": "string",
                            "description": "The secret access key, used for minio and s3",
                            "default": "minioadmin"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "type"
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "type": {
                                    "const": "gcs"
                                }
                            },
                            "required": [
                                "bucket",
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "s3"
                                }
                            },
                            "required": [
                                "bucket",
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "minio"
                                }
                            },
                            "required": [
                                "minioEndpoint",
                                "accessKeyId",
                                "secretAccessKey",
                                "bucket",
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "http"
                                }
                            },
                            "required": [
                                "host",
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "https"
                                }
                            },
                            "required": [
                                "host",
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "file"
                                }
                            },
                            "required": [
                                "path"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "postgres"
                                }
                            },
                            "required": [
                                "dbHosts",
                                "dbPort",
                                "dbName",
                                "dbUser",
                                "dbPass",
                                "registryTable"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "mysql"
                                }
                            },
                            "required": [
                                "dbHosts",
                                "dbPort",
                                "dbName",
                                "dbUser",
                                "dbPass",
                                "registryTable"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "materialize"
                                }
                            },
                            "required": [
                                "dbHosts",
                                "dbPort",
                                "dbName",
                                "dbUser",
                                "dbPass",
                                "registryTable"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "clickhouse"
                                }
                            },
                            "required": [
                                "dbHosts",
                                "dbPort",
                                "dbName",
                                "dbUser",
                                "dbPass",
                                "registryTable"
                            ]
                        },
                        {
                            "properties": {
                                "type": {
                                    "const": "mongodb"
                                }
                            },
                            "required": [
                                "dbHosts",
                                "dbPort",
                                "dbName",
                                "registryCollection"
                            ]
                        }
                    ]
                },
                "ttlSeconds": {
                    "type": "integer",
                    "default": "300",
                    "description": "The number of seconds to cache schemas for"
                },
                "maxSizeBytes": {
                    "type": "integer",
                    "default": "104857600",
                    "description": "The max schema cache size, in bytes"
                },
                "purge": {
                    "type": "object",
                    "description": "Registry purge configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to enable schema cache purge endpoints"
                        },
                        "path": {
                            "type": "string",
                            "default": "/c/purge",
                            "description": "The path by which to purge the schema cache"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                    "enabled",
                        "path"
                    ]
                },
                "http": {
                    "type": "object",
                    "description": "Registry http functionality",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to expose the registry via HTTP"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "backend",
                "ttlSeconds",
                "maxSizeBytes",
                "purge",
                "http"
            ]
        },
        "sinks": {
            "type": "array",
            "description": "Configuration for the sinks",
            "minItems": 1,
            "maxItems": 8,
            "items": {
                "type": "object",
                "description": "Configuration for an individual sink",
                "properties": {
                    "name": {
                        "type": "string",
                        "default": "SINK-NAME",
                        "description": "The sink name"
                    },
                    "type": {
                        "type": "string",
                        "default": "pubsub",
                        "description": "The sink configuration",
                        "enum": [
                            "kafka",
                            "redpanda",
                            "pubsub",
                            "kinesis",
                            "kinesis-firehose",
                            "stdout",
                            "http",
                            "https",
                            "relay",
                            "elasticsearch",
                            "blackhole",
                            "file",
                            "postgres",
                            "pubnub",
                            "mongodb",
                            "mysql",
                            "materialize",
                            "clickhouse",
                            "timescale",
                            "nats",
                            "indicative",
                            "amplitude"
                        ]
                    },
                    "deliveryRequired": {
                        "type": "boolean",
                        "default": "true"
                    },
                    "kafkaBrokers": {
                        "type": "array",
                        "description": "A list of kafka brokers (HOST:PORT)",
                        "default": [
                            "BROKER1:9092",
                            "BROKER2:9092",
                            "BROKER3:9092"
                        ]
                    },
                    "elasticsearchHosts": {
                        "type": "array",
                        "description": "A list of elasticsearch hosts",
                        "default": [
                            "http://es1:9200"
                        ]
                    },
                    "elasticsearchUsername": {
                        "type": "string",
                        "description": "The elasticsearch username",
                        "default": "elastic"
                    },
                    "elasticsearchPassword": {
                        "type": "string",
                        "description": "The elasticsearch password",
                        "default": "elastic"
                    },
                    "project": {
                        "type": "string",
                        "default": "buz-gcp-project",
                        "description": "The name of the GCP project"
                    },
                    "url": {
                        "type": "string",
                        "description": "The destination url",
                        "default": "https://somewheres.net/buz"
                    },
                    "dbHosts": {
                        "type": "array",
                        "description": "The database hostname(s)",
                        "default": [
                            "localhost"
                        ]
                    },
                    "dbPort": {
                        "type": "number",
                        "description": "The database port",
                        "default": 5432
                    },
                    "dbName": {
                        "type": "string",
                        "description": "The database name",
                        "default": "buz"
                    },
                    "dbUser": {
                        "type": "string",
                        "description": "The database connection user",
                        "default": "buz"
                    },
                    "dbPass": {
                        "type": "string",
                        "description": "The database connection password",
                        "default": "buz"
                    },
                    "pubnubPubKey": {
                        "type": "string",
                        "description": "The pubnub pub key",
                        "default": "YOUR-PUB-KEY"
                    },
                    "pubnubSubKey": {
                        "type": "string",
                        "description": "The pubnub sub key",
                        "default": "YOUR-SUB-KEY"
                    },
                    "natsHost": {
                        "type": "string",
                        "description": "The NATS host",
                        "default": "nats"
                    },
                    "natsUser": {
                        "type": "string",
                        "description": "The NATS user",
                        "default": ""
                    },
                    "natsPass": {
                        "type": "string",
                        "description": "The NATS password",
                        "default": ""
                    },
                    "indicativeApiKey": {
                        "type": "string",
                        "description": "The Indicative API key",
                        "default": "YOUR_KEY_HERE"
                    },
                    "amplitudeApiKey": {
                        "type": "string",
                        "description": "The Amplitude API key",
                        "default": "YOUR_KEY_HERE"
                    },
                    "amplitudeRegion": {
                        "type": "string",
                        "description": "The Amplitude region",
                        "default": "standard",
                        "enum": ["standard", "eu"]
                    }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "type",
                    "deliveryRequired"
                ],
                "anyOf": [
                    {
                        "properties": {
                            "type": {
                                "const": "stdout"
                            }
                        },
                        "required": []
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "kafka"
                            }
                        },
                        "required": ["kafkaBrokers"]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "redpanda"
                            }
                        },
                        "required": ["kafkaBrokers"]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "pubsub"
                            }
                        },
                        "required": ["project"]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "kinesis"
                            }
                        },
                        "required": []
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "kinesis-firehose"
                            }
                        },
                        "required": []
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "http"
                            }
                        },
                        "required": [
                            "url"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "https"
                            }
                        },
                        "required": [
                            "url"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "relay"
                            }
                        },
                        "required": [
                            "relayUrl"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "elasticsearch"
                            }
                        },
                        "required": [
                            "elasticsearchHosts",
                            "elasticsearchUsername",
                            "elasticsearchPassword"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "blackhole"
                            }
                        },
                        "required": []
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "file"
                            }
                        },
                        "required": []
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "postgres"
                            }
                        },
                        "required": [
                            "dbHosts",
                            "dbPort",
                            "dbName",
                            "dbUser",
                            "dbPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "materialize"
                            }
                        },
                        "required": [
                            "dbHosts",
                            "dbPort",
                            "dbName",
                            "dbUser",
                            "dbPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "timescale"
                            }
                        },
                        "required": [
                            "dbHosts",
                            "dbPort",
                            "dbName",
                            "dbUser",
                            "dbPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "mysql"
                            }
                        },
                        "required": [
                            "dbHosts",
                            "dbPort",
                            "dbName",
                            "dbUser",
                            "dbPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "clickhouse"
                            }
                        },
                        "required": [
                            "dbHosts",
                            "dbPort",
                            "dbName",
                            "dbUser",
                            "dbPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "pubnub"
                            }
                        },
                        "required": [
                            "pubnubPubKey",
                            "pubnubSubKey"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "mongodb"
                            }
                        },
                        "required": [
                            "dbHosts"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "nats"
                            }
                        },
                        "required": [
                            "natsHost",
                            "natsUser",
                            "natsPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "nats-jetstream"
                            }
                        },
                        "required": [
                            "natsHost",
                            "natsUser",
                            "natsPass"
                        ]
                    },
                    {
                        "properties": {
                            "type": {
                                "const": "amplitude"
                            }
                        },
                        "required": [
                            "amplitudeApiKey",
                            "amplitudeRegion"
                        ]
                    }
                ]
            }
        },
        "squawkBox": {
            "type": "object",
            "description": "Squawkbox configuration",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable the squawkbox",
                    "default": "true"
                }
            },
            "additionalProperties": false,
            "required": [
                "enabled"
            ]
        },
        "tele": {
            "type": "object",
            "description": "Tele configuration",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable telemetry",
                    "default": "true"
                },
                "host": {}
            },
            "additionalProperties": false,
            "required": [
                "enabled"
            ]
        },
        "privacy": {
            "type": "object",
            "description": "Privacy configuration",
            "properties": {
                "anonymize": {
                    "type": "object",
                    "description": "Envelope anonymization configuration",
                    "properties": {
                        "device": {
                            "type": "object",
                            "description": "Whether or not to anonymize various device fields",
                            "properties": {
                                "ip": {
                                    "type": "boolean",
                                    "description": "Whether to anonymize the device ip address for all events",
                                    "default": "false"
                                },
                                "useragent": {
                                    "type": "boolean",
                                    "description": "Whether to anonymize the device useragent for all events",
                                    "default": "false"
                                }
                            },
                            "required": ["ip", "useragent"],
                            "additionalProperties": false
                        },
                        "user": {
                            "type": "object",
                            "description": "Whether or not to anonymize various user fields",
                            "properties": {
                                "id": {
                                    "type": "boolean",
                                    "description": "Whether to anonymize the user id for all events",
                                    "default": "false"
                                }
                            },
                            "required": ["id"],
                            "additionalProperties": false
                        }
                    },
                    "required": ["device", "user"]
                }
            },
            "required": ["anonymize"],
            "additionalProperties": false
        }
    },
    "additionalProperties": false,
    "required": [
        "version",
        "app",
        "middleware",
        "inputs",
        "registry",
        "sinks",
        "squawkBox",
        "tele",
        "privacy"
    ]
}