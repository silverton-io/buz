{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "http://schemas.silverton.io/com.silverton.io/honeypot/config/app/v1.0.json",
    "title": "com.silverton.io/honeypot/config/app/v1.0.json",
    "description": "Application configuration",
    "type": "object",
    "properties": {
        "version": {
            "type": "number",
            "description": "The config version"
        },
        "app": {
            "type": "object",
            "description": "Application configuration",
            "properties": {
                "env": {
                    "type": "string",
                    "default": "dev",
                    "description": "Collector environment",
                    "enum": ["development", "staging", "production"]
                },
                "mode": {
                    "type": "string",
                    "default": "debug",
                    "description": "Collector mode",
                    "enum": ["release", "debug"]
                },
                "port": {
                    "type": "integer",
                    "default": "8081",
                    "description": "Collector port"
                },
                "trackerDomain": {
                    "type": "string",
                    "default": "test.silverton.io",
                    "description": "The collector domain"
                },
                "health": {
                    "type": "object",
                    "description": "Health configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Switch to enable or disable health endpoints"
                        },
                        "path": {
                            "type": "string",
                            "default": "/health",
                            "description": "The path by which to expose health endpoint"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                },
                "stats": {
                    "type": "object",
                    "description": "Stats configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Switch to enable or disable stats endpoints"
                        },
                        "path": {
                            "type": "string",
                            "default": "/stats",
                            "description": "The path by which to expose collector statistics"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                }
            },
            "additionalProperties": false,
            "required": ["env", "mode", "port", "trackerDomain", "health", "stats"]
        },
        "middleware": {
            "type": "object",
            "description": "Middleware configuration",
            "properties": {
                "timeout": {
                    "type": "object",
                    "description": "Request timeout configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to time out all requests after a specified period of time"   
                        },
                        "ms": {
                            "type": "integer",
                            "default": "2000",
                            "description": "Time out request and return a 4xx status code if this number of milliseconds is exceeded"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "ms"]
                },
                "rateLimiter": {
                    "type": "object",
                    "description": "Rate limiter configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to enable the rate limiter"
                        },
                        "period": {
                            "type": "string",
                            "default": "S",
                            "description": "The period by which to limit requests",
                            "enum": ["MS", "S", "M", "H", "D"]
                        },
                        "limit": {
                            "type": "integer",
                            "default": "10",
                            "description": "The number of requests allowed within the specified period"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "period", "limit"]
                },
                "cookie": {
                    "type": "object",
                    "description": "Server-set cookie configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate the server-side id cookie"
                        },
                        "name": {
                            "type": "string",
                            "default": "nuid",
                            "description": "The name of the id cookie"
                        },
                        "secure": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Secure cookie?"
                        },
                        "ttlDays": {
                            "type": "integer",
                            "default": "365",
                            "description": "The number of days to persist the id cookie"
                        },
                        "domain": {
                            "type": "string",
                            "default": "silverton.io",
                            "description": "The id cookie domain"
                        },
                        "path": {
                            "type": "string",
                            "default": "/",
                            "description": "The id cookie path"
                        },
                        "sameSite": {
                            "type": "string",
                            "default": "Lax",
                            "description": "The sameSite attribute of the id cookie",
                            "enum": ["Lax", "Strict", "None"]
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "name", "secure", "ttlDays", "domain", "path", "sameSite"]
                },
                "cors": {
                    "type": "object",
                    "description": "CORS configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate the CORS middleware"
                        },
                        "allowOrigin": {
                            "type": "array",
                            "default": ["*"],
                            "description": "A list of origins to allow CORS",
                            "items": {
                                "type": "string"
                            }
                        },
                        "allowCredentials": {
                            "type": "boolean",
                            "default": "true",
                            "description": "CORS allow credentials"
                        },
                        "allowMethods": {
                            "type": "array",
                            "default": ["GET", "POST", "OPTIONS"],
                            "description": "HTTP methods to allow CORS",
                            "items": {
                                "type": "string",
                                "enum": ["OPTIONS", "GET", "POST"]
                            }
                        },
                        "maxAge": {
                            "type": "integer",
                            "default": "86400",
                            "description": "Preflight request cache duration"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "allowOrigin", "allowCredentials", "allowMethods", "maxAge"]
                },
                "requestLogger": {
                    "type": "object",
                    "description": "Request logger configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate the json request logging middleware"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled"]
                },
                "yeet": {
                    "type": "object",
                    "description": "Yeet configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to activate the yeet middleware"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled"]
                }
            },
            "required": ["timeout", "rateLimiter", "cookie", "cors", "requestLogger", "yeet"]
        },
        "inputs": {
            "type": "object",
            "description": "Input configuration",
            "properties": {
                "snowplow": {
                    "type": "object",
                    "description": "Snowplow collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate snowplow tracking"
                        },
                        "standardRoutesEnabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to not to activate the standard snowplow routes"
                        },
                        "openRedirectsEnabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate redirect-based tracking"
                        },
                        "getPath": {
                            "type": "string",
                            "default": "/plw/g",
                            "description": "The path by which to process get-based events"
                        },
                        "postPath": {
                            "type": "string",
                            "default": "/plw/p",
                            "description": "The path by which to process post-based events"
                        },
                        "redirectPath": {
                            "type": "string",
                            "default": "/plw/r",
                            "description": "The path by which to process redirect-based events"
                        },
                        "anonymize": {
                            "type": "object",
                            "description": "Snowplow anonymization config",
                            "properties": {
                                "ip": {
                                    "type": "boolean",
                                    "default": "false",
                                    "description": "Whether or not to hash the ip address of incoming snowplow events"
                                },
                                "userId": {
                                    "type": "boolean",
                                    "default": "false",
                                    "description": "Whether or not to hash the userId of incoming snowplow events"
                                }
                            }
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "standardRoutesEnabled", "openRedirectsEnabled", "getPath", "postPath", "redirectPath", "anonymize"]
                },
                "cloudevents": {
                    "type": "object",
                    "description": "CloudEvents collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate cloudevents tracking"
                        },
                        "postPath": {
                            "type": "string",
                            "default": "/ce/p",
                            "description": "The path by which to process incoming single-message cloudevents payloads"
                        },
                        "batchPostPath": {
                            "type": "string",
                            "default": "/ce/bp",
                            "description": "The path by which to process incoming batch cloudevents payloads"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "postPath", "batchPostPath"]
                },
                "generic": {
                    "type": "object",
                    "description": "Generic self-describing events collector configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to activate generic self-describing event tracking"
                        },
                        "postPath": {
                            "type": "string",
                            "default": "/gen/p",
                            "description": "The path by which to process incoming single-message self describing payloads"
                        },
                        "batchPostPath": {
                            "type": "string",
                            "default": "/gen/bp",
                            "description": "The path by which to process incoming batch self describing payloads"
                        },
                        "contexts": {
                            "type": "object",
                            "description": "Self describing events context config",
                            "properties": {
                                "rootKey": {
                                    "type": "string",
                                    "default": "contexts",
                                    "description": "The root json key that defines event contexts"
                                },
                                "schemaKey": {
                                    "type": "string",
                                    "default": "schema",
                                    "description": "The key that defines the context schema. (root.CONTEXTKEY.SCHEMAKEY)"
                                },
                                "dataKey": {
                                    "type": "string",
                                    "default": "data",
                                    "description": "The key that defines the context data. (root.CONTEXTKEY.DATAKEY)"
                                }
                            },
                            "additionalProperties": false,
                            "required": ["rootKey", "schemaKey", "dataKey"]
                        },
                        "payload": {
                            "type": "object",
                            "description": "Self describing events payload data config",
                            "properties": {
                                "rootKey": {
                                    "type": "string",
                                    "default": "data",
                                    "description": "The root json key that defines payload data. (root.PAYLOADKEY)"
                                },
                                "schemaKey": {
                                    "type": "string",
                                    "default": "schema",
                                    "description": "The key that defines the payload schema. (root.PAYLOADKEY.SCHEMAKEY)"
                                },
                                "dataKey": {
                                    "type": "string",
                                    "default": "data",
                                    "description": "The key that defines the payload data. (root.PAYLOADKEY.DATAKEY)"
                                }
                            },
                            "additionalProperties": false,
                            "required": ["rootKey", "schemaKey", "dataKey"]
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "postPath", "batchPostPath", "contexts", "payload"]
                },
                "webhook": {
                    "type": "object",
                    "description": "Arbitrary webhook configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to enable arbitrary webhooks",
                            "default": "true"
                        },
                        "path": {
                            "type": "string",
                            "description": "The arbitrary webhook route",
                            "default": "/wb/hk"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                },
                "relay": {
                    "type": "object",
                    "description": "Relay configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to enable the relay",
                            "default": "true"
                        },
                        "path": {
                            "type": "string",
                            "description": "The relay route",
                            "default": "/relay"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                }
            },
            "additionalProperties": false,
            "required": ["snowplow", "cloudevents", "generic", "webhook", "relay"]
        },
        "schemaCache": {
            "type": "object",
            "description": "Schema cache configuration",
            "properties": {
                "schemaCacheBackend": {
                    "type": "object",
                    "description": "Cache backend configuration",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "s3",
                            "description": "The type of schema cache backend",
                            "enum": ["gcs", "s3", "fs", "http", "https"]
                        },
                        "path": {
                            "type": "string",
                            "default": "/",
                            "description": "The root path of the schema cache backend"
                        },
                        "bucket": {
                            "type": "string",
                            "default": "honeypot-schemas",
                            "description": "The schema cache bucket, if applicable"
                        },
                        "host": {
                            "type": "string",
                            "description": "The schema cache host, if applicable"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["type", "path"]
                },
                "ttlSeconds": {
                    "type": "integer",
                    "default": "300",
                    "description": "The number of seconds to cache schemas for"
                },
                "maxSizeBytes": {
                    "type": "integer",
                    "default": "104857600",
                    "description": "The max schema cache size, in bytes"
                },
                "purge": {
                    "type": "object",
                    "description": "Cache purge configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether or not to enable schema cache purge endpoints"
                        },
                        "path": {
                            "type": "string",
                            "default": "/c/purge",
                            "description": "The path by which to purge the schema cache"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled", "path"]
                },
                "schemaEndpoints": {
                    "type": "object",
                    "description": "Schema endpoint configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether or not to enable schema cache endpoints"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["enabled"]
                }
            },
            "additionalProperties": false,
            "required": ["schemaCacheBackend", "ttlSeconds", "maxSizeBytes", "purge", "schemaEndpoints"]
        },
        "manifold": {
            "type": "object",
            "description": "Manifold configuration",
            "properties": {
                "bufferRecordThreshold": {
                    "type": "number",
                    "description": "The record threshold at which point the manifold buffer is purged",
                    "default": "1"
                },
                "bufferByteThreshold": {
                    "type": "number",
                    "description": "The byte threshold at which point the manifold buffer is purged",
                    "default": "1024"
                },
                "bufferTimeThreshold": {
                    "type": "number",
                    "description": "The time threshold (in seconds) at which point the manifold buffer is purged",
                    "default": "60"
                }
            },
            "additionalProperties": false,
            "required": ["bufferRecordThreshold", "bufferByteThreshold", "bufferTimeThreshold"]
        },
        "sink": {
            "type": "object",
            "description": "Sink configuration",
            "properties": {
                "type": {
                    "type": "string",
                    "default": "pubsub",
                    "description": "The sink configuration",
                    "enum": ["kafka", "pubsub", "kinesis", "kinesis-firehose", "stdout", "http", "https", "relay", "elasticsearch", "blackhole", "file", "postgres", "pubnub"]
                },
                "kafkaBrokers": {
                    "type": "array",
                    "description": "A list of kafka brokers (HOST:PORT), if sink type is kafka",
                    "default": ["BROKER1:9092", "BROKER2:9092", "BROKER3:9092"]
                },
                "elasticsearchHosts": {
                    "type": "array",
                    "description": "A list of elasticsearch hosts, if sink type is elasticsearch",
                    "default": ["http://es1:9200"]
                },
                "elasticsearchUsername": {
                    "type": "string",
                    "description": "The elasticsearch username, if sink type is elasticsearch",
                    "default": "elastic"
                },
                "elasticsearchPassword": {
                    "type": "string",
                    "description": "The elasticsearch password, if sink type is elasticsearch",
                    "default": "elastic"
                },
                "validEventTopic": {
                    "type": "string",
                    "default": "honeypot-valid-topic",
                    "description": "The name of the valid event topic (or 'stream', if kinesis)"
                },
                "validUrl": {
                    "type": "string",
                    "description": "The url to sink valid envelopes to if sink type is http or https",
                    "default": "https://your-endpoint.net/valid-events-here"
                },
                "validIndex": {
                    "type": "string",
                    "description": "The index to sink valid envelopes to if sink type is elasticsearch",
                    "default": "honeypot-valid"
                },
                "validFile": {
                    "type": "string",
                    "description": "The file to sink valid envelopes to if sink type is file",
                    "default": "honeypot-valid.json"
                },
                "validTable": {
                    "type": "string",
                    "description": "The table to sink valid envelopes to if sink type is postgres",
                    "default": "honeypot_valid"
                },
                "validChannel": {
                    "type": "string",
                    "description": "The channel to sink valid envelopes to if sink type is pubnub",
                    "default": "honeypot-valid"
                },
                "invalidEventTopic": {
                    "type": "string",
                    "description": "The name of the invalid event topic (or 'stream', if kinesis)",
                    "default": "honeypot-invalid-topic"
                },
                "invalidUrl": {
                    "type": "string",
                    "description": "The url to sink invalid envelopes if sink type is http or https",
                    "default": "https://your-endpoint.net/invalid-events-here"
                },
                "invalidIndex": {
                    "type": "string",
                    "description": "The index to sink invalid envelopes to if sink type is elasticsearch",
                    "default": "honeypot-invalid"
                },
                "invalidFile": {
                    "type": "string",
                    "description": "The file to sink invalid envelopes to if sink type is file",
                    "default": "honeypot-invalid.json"
                },
                "invalidTable": {
                    "type": "string",
                    "description": "The table to sink invalid envelopes to if sink type is postgres",
                    "default": "honeypot_invalid"
                },
                "invalidChannel": {
                    "type": "string",
                    "description": "The channel to sink invalid envelopes to if sink type is pubnub",
                    "default": "honeypot-invalid"
                },
                "produceTimeout": {
                    "type": "integer",
                    "default": "5",
                    "description": "The sink producer timeout in seconds"
                },
                "project": {
                    "type": "string",
                    "default": "honeypot-gcp-project",
                    "description": "The name of the GCP project, if sink type is pubsub"
                },
                "relayUrl": {
                    "type": "string",
                    "description": "The url to relay envelopes to, if sink type is relay",
                    "default": "https://another-honeypot.net/relay"
                },
                "dbHost": {
                    "type": "string",
                    "description": "The database hostname to write envelopes to if sink type is postgres",
                    "default": "localhost"
                },
                "dbPort": {
                    "type": "number",
                    "description": "The database port to write envelopes to if sink type is postgres",
                    "default": 5432
                },
                "dbName": {
                    "type": "string",
                    "description": "The database name if sink type is postgres",
                    "default": "honeypot"
                },
                "dbUser": {
                    "type": "string",
                    "description": "The database connection user if sink type is postgres",
                    "default": "honeypot"
                },
                "dbPass": {
                    "type": "string",
                    "description": "The database connection password if sink type is postgres",
                    "default": "honeypot"
                },
                "pubnubPubKey": {
                    "type": "string",
                    "description": "The pubnub pub key",
                    "default": "YOUR-PUB-KEY"
                },
                "pubnubSubKey": {
                    "type": "string",
                    "description": "The pubnub sub key",
                    "default": "YOUR-SUB-KEY"
                }
            },
            "additionalProperties": false,
            "required": ["type", "produceTimeout"],
            "anyOf": [
                {
                    "properties": {
                        "type": {
                            "const": "stdout"
                        }
                    },
                    "required": []
                },
                {
                    "properties": {
                        "type": {
                            "const": "kafka"
                        }
                    },
                    "required": ["kafkaBrokers", "validEventTopic", "invalidEventTopic"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "pubsub"
                        }
                    },
                    "required": ["project", "validEventTopic", "invalidEventTopic"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "kinesis"
                        }
                    },
                    "required": ["validEventTopic", "invalidEventTopic"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "kinesis-firehose"
                        }
                    },
                    "required": ["validEventTopic", "invalidEventTopic"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "http"
                        }
                    },
                    "required": ["validUrl", "invalidUrl"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "https"
                        }
                    },
                    "required": ["validUrl", "invalidUrl"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "relay"
                        }
                    },
                    "required": ["relayUrl"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "elasticsearch"
                        }
                    },
                    "required": ["elasticsearchHosts", "elasticsearchUsername", "elasticsearchPassword", "validIndex", "invalidIndex"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "blackhole"
                        }
                    },
                    "required": []
                },
                {
                    "properties": {
                        "type": {
                            "const": "file"
                        }
                    },
                    "required": ["validFile", "invalidFile"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "postgres"
                        }
                    },
                    "required": ["dbHost", "dbPort", "dbName", "dbUser", "dbPass", "validTable", "invalidTable"]
                },
                {
                    "properties": {
                        "type": {
                            "const": "pubnub"
                        }
                    },
                    "required": ["validChannel", "invalidChannel", "pubnubPubKey", "pubnubSubKey"]
                }
            ]
        },
        "squawkBox": {
            "type": "object",
            "description": "Squawkbox configuration",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable the squawkbox",
                    "default": "true"
                },
                "cloudeventsPath": {
                    "type": "string",
                    "description": "Path for the cloudevents squawkbox",
                    "default": "/sqwk/ce"
                },
                "snowplowPath": {
                    "type": "string",
                    "description": "Path for the snowplow squawkbox",
                    "default": "/sqwk/sp"
                },
                "genericPath": {
                    "type": "string",
                    "description": "Path for the generic self-describing events squawkbox",
                    "default": "/sqwk/gen"
                }
            },
            "additionalProperties": false,
            "required": ["enabled", "cloudeventsPath", "snowplowPath", "genericPath"]
        },
        "tele": {
            "type": "object",
            "description": "Tele configuration",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable telemetry",
                    "default": "true"
                },
                "heartbeatMs": {
                    "type": "integer",
                    "description": "The number of ms to send a heartbeat",
                    "default": 30000
                },
                "host": {}
            },
            "additionalProperties": false,
            "required": ["enabled", "heartbeatMs"]
        }
    },
    "additionalProperties": false,
    "required": [ "version", "app", "middleware", "inputs", "schemaCache", "manifold", "sink", "squawkBox","tele"]
}
